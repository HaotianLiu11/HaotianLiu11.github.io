{"meta":{"title":"福江 の いえ","subtitle":"富江江江江","description":"一只孜孜不倦的程序猿，立志把分享变成一种习惯！","author":"Fu JANG","url":"http://liuhaotian.top","root":"/"},"pages":[{"title":"关于我","date":"2020-05-27T09:20:50.000Z","updated":"2020-05-29T16:19:14.544Z","comments":true,"path":"about/index.html","permalink":"http://liuhaotian.top/about/index.html","excerpt":"","text":"征婚启事我是个普普通通的大一学生，来自普普通通的大学，有着普普通通的生活，不知不觉已经19了，最大的梦想是找个女朋友！ 不过要实现找个妞陪我的梦想好难好难，所以我退而求其次，希望自己未来可以过一个好生活，然后再找个妞，曲线救国哈哈哈。 不过未来想活的好就得有money呀，虽然俗气了一些。但是毕竟贫贱夫妻百事哀嘛，所以为了给将来的老婆买包，我要努力努力努力努力努力努力！！！ 最近想努力奋斗，然后在ACM或者蓝桥杯中拿个好名次，and now自己同时在学习编程知识(后端开发)，不过学业荒废了好久emmmmm… 联系方式热烈欢迎女同学来找我玩儿！！五大三粗并且要请教问题的汉子就不要加了emmmm我怕入坑… QQ： 2235749416 微信： a13019949398 日常热爱超喜欢你的名字、天气之子、大鱼海棠，因为女主都好温柔啊~ 还喜欢听音乐，温柔中带一点点忧郁那种类型，emmmm,当然也喜欢敲代码…还有我超级老实，一个本分的孩子就是我啦! 个人性格也很多愁善感，超级善变，泪点超低。就叨咕这么多啦~ 附图一张"},{"title":"分类","date":"2020-05-26T05:00:55.000Z","updated":"2020-05-27T04:57:46.858Z","comments":false,"path":"categories/index.html","permalink":"http://liuhaotian.top/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-05-26T05:00:55.000Z","updated":"2020-05-29T12:23:57.525Z","comments":true,"path":"comments/index.html","permalink":"http://liuhaotian.top/comments/index.html","excerpt":"","text":"欢迎大家留言给我鸭，我都会看到的~"},{"title":"友链","date":"2020-05-26T05:00:55.000Z","updated":"2020-05-27T13:39:16.948Z","comments":true,"path":"link/index.html","permalink":"http://liuhaotian.top/link/index.html","excerpt":"","text":"想分享友情链接的小伙伴留言即可~"},{"title":"音乐","date":"2020-05-27T11:17:35.000Z","updated":"2020-05-27T12:07:16.641Z","comments":false,"path":"music/index.html","permalink":"http://liuhaotian.top/music/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-26T05:00:55.000Z","updated":"2020-05-27T04:58:17.182Z","comments":false,"path":"tags/index.html","permalink":"http://liuhaotian.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"translate first day","slug":"translate-first-day","date":"2020-05-30T23:38:27.000Z","updated":"2020-05-30T23:55:04.554Z","comments":true,"path":"2020/05/31/translate-first-day/","link":"","permalink":"http://liuhaotian.top/2020/05/31/translate-first-day/","excerpt":"","text":"A week of distractions from Trump shows a leader in crisis(CNN)On Monday, as the nation marked Memorial Day, President Donald Trump mocked his campaign rival for wearing a face mask. On Wednesday, as the national death toll from coronavirus reached a wretched milestone, Trump and his family flew to Florida in an attempted focus on space travel. By Friday, as smoke was lifting in Minneapolis after a night of racial unrest, he announced the United States would withdraw from the World Health Organization. A day later, after another night of protests, he declared himself safe inside his heavily fortified mansion and insinuated his own supporters would rally outside that evening. In between, there was a dark suggestion of murder, false conspiracies about voting through the mail, a fight over where to hold his nominating convention and a dramatic escalation of ill will with the very social media platform that facilitated almost all the other diversions in the first place. Trump’s efforts to change the subject at moments of peril have been a hallmark of his entire career in politics and, when successful, a constant source of frustration for his rivals. But rarely have they appeared more blatant or off-key than now, as a battered nation emerges from a pandemic that has left more than 100,000 dead and as racial unrest brews again.That it is all happening five months before Trump faces an election in which polls show him trailing only heightens the sense of a leader in crisis, even as he insists he has a handle on both matters and attempts to proceed as planned with his presidency. Trump, cognizant of his precarious political position, has retrenched. Unwilling or unable to strike a unifying tone, Trump lashed out Saturday morning when he criticized the Democratic mayors of Washington and Minneapolis while appearing to summon his own supporters to rally outside the White House. After announcing his was safe, warning he was protected by “vicious dogs” and “ominous weapons,” Trump provided a play-by-play of Friday evening’s protests, of which he said he’d “watched every move.” Trump wrote: “Tonight, I understand, is MAGA NIGHT AT THE WHITE HOUSE???” Advisers insist Trump is focused on reviving the country after three months of pandemic that have led, along with the six-figure death toll, to record levels of unemployment and entire industries shuttered. Trump has aggressively pushed for states to reopen even when they don’t necessarily meet the parameters set out by his task force, which has seen its meetings sharply curtailed and its health experts’ public roles reduced. At the same time, Trump has sought over the past week to shine the presidential spotlight into dustier corners filled with festering racial grievances and antique conspiracies, all of which have been debunked. He has waged feuds old and new and unveiled strategically timed policy announcements at a moment when his leadership is being questioned. The events that unfolded after the President issued a tweet early Friday laden with racist overtones underscored the degree to which he has used inflammatory statements to ignite controversy and enthuse his supporters, even as he denied later that those were his intentions. Aides spent Friday debating whether Trump should address the situation in Minnesota during a planned appearance in the Rose Garden, which had been called to announce new actions against China and the US withdrawal from the World Health Organization. Some of his advisers encouraged him to speak about Minnesota because his election-year rival had already delivered an address on the topic. Others were more skeptical, convinced Trump would only face more questions about his tweet that used a phrase first uttered by a Miami police chief in 1967 to describe a crackdown in black neighborhoods. More than 12 hours after tweeting “when the looting starts, the shooting starts” as images of Minneapolis fire and riots played on cable news, Trump insisted on Twitter that his message was not, in fact, a reference to brutal civil rights-era police tactics. But he ignored the topic in the Rose Garden, choosing instead to focus on China and retreating to the Oval Office as reporters shouted questions. It was only around 5 p.m. ET — after a full day of public silence — that Trump announced he’d spoken with the family of George Floyd, the black man who had died after being pinned to the ground by his neck by a white police officer. “It certainly looked like there was no excuse for it,” he said of the violent arrest during a roundtable event meant to focus on coronavirus. The episode followed Trump’s longtime model of igniting controversy before retreating hours later. If anything, leaving his message lingering without explanation was a diversion in itself and another example of Trump’s inability — or unwillingness — to put aside the divisive itch he’s long cultivated. The role of national consoler has never come easily to Trump, nor have attempts at unifying a country riven by politics and ideology. In many instances he’s simply shown no interest in assuming the tone or accepting the responsibilities that US presidents have shouldered throughout history. He doesn’t believe it’s up to him to demonstrate responsible mask-wearing, and he retweeted a message earlier this week that appeared to mock former Vice President Joe Biden’s mask-and-aviators ensemble. Most of the country may say Trump should wear a mask in public — a Quinnipiac University poll this week put the figure at 67% — but among white men the number stands only at 49%, enough for his stance to pass political muster with his most reliable bloc of supporters. As coronavirus began ravaging parts of the country, he did declare himself a wartime President waging battle against the “invisible enemy.” But with war comes death — in this case, more US deaths than the Vietnam and Korean wars combined — and Trump was slow to acknowledge the 100,000 milestone reached midweek. He was aboard Air Force One when the death toll officially ticked into six digits, returning to Washington after his plans to witness the first manned US space launch in nearly a decade had been thwarted by the weather. He had hoped that the trip, with his entire family in tow, would help shift a national storyline from the miserable pandemic toward a more optimistic one of scientific potential. But the launch was scrubbed when thunderstorms rolled in and Trump was forced to return to Washington. The President didn’t address the grim figure as he returned to the White House with the first lady on Wednesday. He finally tweeted about it on Thursday morning, deeming it “a very sad milestone.” But he did not make time to address it in person. Instead, he has wielded sinister conspiracies and false allegations. He’s railed against vote-by-mail, which many governors are seeking to expand amid a highly contagious viral pandemic and which has not proved to be rife with fraud. Despite his issues with the practice, Trump himself voted by mail in February, even though he was in Florida — the state where he votes — on the day that early voting locations opened and drove past one that’s across from his golf course at least six times. He has actively worked to relitigate the circumstances that led to Robert Mueller’s Russia investigation, including this week, when he fan-danced around the still-unnamed allegation against his predecessor Barack Obama. On Friday evening, his newly installed director of national intelligence appeared to further the cause by releasing the transcripts of phone calls between Trump’s onetime national security adviser and the then-Russian ambassador to the United States. The darkest of Trump’s fixations remains the unfounded insinuation that a morning cable news host played a role in killing a young aide almost two decades ago, a blatant falsehood that led this week to pleas from the young woman’s widower for Twitter to disallow the messages. The social media giant did not block those messages but did attempt to fact-check his claims about vote-by-mail, a move that set Trump off and led to a hurried effort inside the White House to finalize an executive order few believe will withstand legal scrutiny and that could, potentially, cause even more regulation of the President’s tweets. Hours after he signed it, Twitter slapped a warning on his Minnesota tweet, saying it glorified violence. At one time, Trump used his once-a-week campaign rallies to unleash the vitriol and paranoia that his supporters love and that he believes are the very characteristics that led to his unlikely victory in 2016. Rallies are out of the question for now — though aides say they’re looking to revive them sooner rather than later. This story has been updated with additional developments.","categories":[{"name":"TRANSLATE","slug":"TRANSLATE","permalink":"http://liuhaotian.top/categories/TRANSLATE/"}],"tags":[{"name":"TRANSLATE","slug":"TRANSLATE","permalink":"http://liuhaotian.top/tags/TRANSLATE/"}]},{"title":"CODEFORCES 800 1360B.Honest Coach","slug":"CODEFORCES1360B","date":"2020-05-30T11:35:09.000Z","updated":"2020-05-30T12:48:03.435Z","comments":true,"path":"2020/05/30/CODEFORCES1360B/","link":"","permalink":"http://liuhaotian.top/2020/05/30/CODEFORCES1360B/","excerpt":"","text":"1360B.Honest Coach原题链接1360B.Honest Coach 题目大意第一行输入测试数目 第二行输入队员个数 描述：把队员分成两队，每队最少为1人，求abs|第一个队的最大值减去第二个队的最小值|最小 解题思路贪心的思想，先排序，再贪心 解题代码12345678910111213141516171819202122232425#include &lt;stdio.h&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); while (t--) &#123; int n; scanf(&quot;%d&quot;, &amp;n); vector&lt;int&gt; nums(n); for (auto &amp;x : nums) &#123; scanf(&quot;%d&quot;, &amp;x); &#125; sort(nums.begin(), nums.end()); int result &#x3D; 0x3f3f3f3f; for (int i &#x3D; 1; i &lt; n; i++) &#123; result &#x3D; min(result, abs(nums[i] - nums[i - 1])); &#125; printf(&quot;%d\\n&quot;, result); &#125;&#125;","categories":[{"name":"CODEFORCES","slug":"CODEFORCES","permalink":"http://liuhaotian.top/categories/CODEFORCES/"}],"tags":[{"name":"CODEFORCES800","slug":"CODEFORCES800","permalink":"http://liuhaotian.top/tags/CODEFORCES800/"},{"name":"acm/greedy","slug":"acm-greedy","permalink":"http://liuhaotian.top/tags/acm-greedy/"}]},{"title":"API之stringstream用法","slug":"API之stringstream用法","date":"2020-05-30T02:06:47.000Z","updated":"2020-05-30T03:11:16.954Z","comments":true,"path":"2020/05/30/API之stringstream用法/","link":"","permalink":"http://liuhaotian.top/2020/05/30/API%E4%B9%8Bstringstream%E7%94%A8%E6%B3%95/","excerpt":"","text":"API之stringstream用法本文主要介绍 C++ 中 stringstream 类的常见用法。 1.概述&lt;sstream&gt;定义了三个类：istringstream、ostringstream和stringstream，分别用来进行流的输入、输出和输入输出操作。本文以stringstream为主，介绍流的输入和输出操作 &lt;sstream&gt;主要用来进行数据类型转换，由于&lt;sstream&gt;使用string对象来代替字符数组（snprintf方式），就避免缓冲区溢出的危险；而且，因为传入参数和目标对象的类型会被自动推导出来，所以不存在错误的格式化符的问题。简单说，相比c库的数据类型转换而言，&lt;sstream&gt;更加安全、自动和直接 2.代码示例2.1数据类型转换这里展示一个代码示例，该示例介绍了将int类型转换为string类型的过程。示例代码（stringstream_test1.cpp）如下：12345678910111213141516171819202122#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;string&gt;using namespace std;int main() &#123; stringstream sstream; string strResult; int nValue &#x3D; 1000; &#x2F;&#x2F; 将int类型的值放入输入流中 sstream &lt;&lt; nValue; &#x2F;&#x2F; 从sstream中抽取前面插入的int类型的值，赋给string类型 sstream &gt;&gt; strResult; cout &lt;&lt; &quot;[cout]strResult is: &quot; &lt;&lt; strResult &lt;&lt; endl; printf(&quot;[printf]strResult is: %s\\n&quot;, strResult.c_str()); return 0;&#125;结果如下：12[cout]strResult is: 1000 [printf]strResult is: 1000 2.2多个字符串拼接本示例介绍在stringstream中存放多个字符串，实现多个字符串拼接的目的（其实完全可以使用 string类实现），同时，介绍stringstream的清空方法。示例代码（stringstream_test2.cpp）如下： 1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;string&gt;using namespace std;int main() &#123; stringstream sstream; &#x2F;&#x2F; 将多个字符串放入 sstream 中 sstream &lt;&lt; &quot;first&quot; &lt;&lt; &quot; &quot; &lt;&lt; &quot;string,&quot;; sstream &lt;&lt; &quot; second string&quot;; cout &lt;&lt; &quot;strResult is: &quot; &lt;&lt; sstream.str() &lt;&lt; endl; &#x2F;&#x2F; 清空 sstream sstream.str(&quot;&quot;); sstream &lt;&lt; &quot;third string&quot;; cout &lt;&lt; &quot;After clear, strResult is: &quot; &lt;&lt; sstream.str() &lt;&lt; endl; return 0;&#125; 结果如下：12strResult is: first string, second stringAfter clear, strResult is: third string 从上述代码执行结果能够知道： 可以使用str()方法，将stringstream类型转换为string类型 可以将多个字符串放入stringstream中，实现字符串的拼接目的 如果想清空stringstream，必须使用sstream.str(&quot;&quot;); 方式:clear()方法适用于进行多次数据类型转换的场景。详见示例2.3 2.3stringstream的清空清空stringstream有两种方法：clear()方法以及str(&quot;&quot;)方法，这两种方法有不同的使用场景。str(&quot;&quot;)方法的使用场景，在上面的示例中已经介绍了，这里介绍clear()方法的使用场景。示例代码（stringstream_test3.cpp）如下： 1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;sstream&gt;using namespace std;int main() &#123; stringstream sstream; int first, second; &#x2F;&#x2F; 插入字符串 sstream &lt;&lt; &quot;456&quot;; &#x2F;&#x2F; 转换为int类型 sstream &gt;&gt; first; cout &lt;&lt; first &lt;&lt; endl; &#x2F;&#x2F; 在进行多次类型转换前，必须先运行clear() sstream.clear(); &#x2F;&#x2F; 插入bool值 sstream &lt;&lt; true; &#x2F;&#x2F; 转换为int类型 sstream &gt;&gt; second; cout &lt;&lt; second &lt;&lt; endl; return 0;&#125; 结果如下：124561 注意：在本示例涉及的场景下（多次数据类型转换），必须使用clear()方法清空stringstream，不使用clear()方法或使用str(&quot;&quot;)方法，都不能得到数据类型转换的正确结果。下图分别是未使用clear()方法、使用str(&quot;&quot;)方法时的运行结果： 1234545641970084560 2.4测试1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;string&gt;using namespace std;int main() &#123; stringstream sstream; &#x2F;&#x2F; 将多个字符串放入 sstream 中 sstream &lt;&lt; &quot;firstiiii&quot; &lt;&lt; &quot; &quot; &lt;&lt; &quot;string,&quot;; sstream &lt;&lt; &quot; second string&quot;; string a, b; sstream &gt;&gt; a; cout &lt;&lt; &quot;strResult is: &quot; &lt;&lt; a &lt;&lt; endl; sstream &gt;&gt; a; cout &lt;&lt; &quot;strResult is: &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; sstream.str(); return 0;&#125; 结果如下：123strResult is: firstiiiistrResult is: string,firstiiii string, second string由此可知，我们可以用它来分割字符串中的单词 3.例题LEETCODE1455. 检查单词是否为句中其他单词的前缀 123456789101112class Solution &#123; public: int isPrefixOfWord(string sentence, string searchWord) &#123; stringstream ssin(sentence); string word; for (int i &#x3D; 1; ssin &gt;&gt; word; i++) if (word.substr(0, searchWord.size()) &#x3D;&#x3D; searchWord) return i; return -1; &#125;&#125;;","categories":[{"name":"C/C++常用API","slug":"C-C-常用API","permalink":"http://liuhaotian.top/categories/C-C-%E5%B8%B8%E7%94%A8API/"}],"tags":[{"name":"C/C++常用API","slug":"C-C-常用API","permalink":"http://liuhaotian.top/tags/C-C-%E5%B8%B8%E7%94%A8API/"}]},{"title":"0x02递推与递归","slug":"0x02递推与递归","date":"2020-05-30T00:39:58.000Z","updated":"2020-05-30T04:14:30.400Z","comments":true,"path":"2020/05/30/0x02递推与递归/","link":"","permalink":"http://liuhaotian.top/2020/05/30/0x02%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/","excerpt":"","text":"0x02递推与递归基础知识一个实际问题的各种可能情况构成的集合通常称为“状态空间”，而程序的运行则是对状态空间的遍历 对于一个待求解的问题，当它局限在某处边界、某个小范围或者某种特殊情况下时，其答案往往是已知的。如果能够将该解答的应用场景扩大到原问题的状态空间，并且扩展过程的每个步骤具有相似性，就可以考虑使用递推或者递归求解 以已知的“问题边界”为起点向“原问题”正向推导的扩展方式就是递推。然而在很多时候，推导的路线难以确定，这时以“原问题”为起点尝试寻找把状态空间缩小到已知的“问题边界”路线，再通过该路线反向回溯的遍历方式就是递归 使用递推或递归要求“原问题”与“问题边界”之间的每个变换步骤具有相似性，这样我们才能设计一段程序来实现该步骤，将其重复作用于问题之中。换句话说，程序在每个步骤上应该面对相同种类的问题，这些问题都是原问题的一个子问题，可能仅在规模或者某些限制条件上有所区别，并且能够使用“求解原问题的程序”进行求解 对于递归算法，有了上面这个前提，我们就可以让程序在每个变换步骤中执行三个操作： 缩小问题状态空间的规模。这意味着程序尝试寻找在“原问题”与“问题边界”之间的变换路线，并向正在探索的路线迈出一步 尝试求解规模缩小以后的问题，结果可能是成功，也可能是失败 如果成功，即找到了规模缩小后的问题的答案，那么将答案扩展到当前问题；如果失败，那么重新回到当前问题，程序可能会继续寻找当前问题的其他变换路线，直至最终确定当前问题无法继续求解 以上三个操作有两点特别关键：一是“如何尝试求解规模缩小以后的问题”。因为规模缩小以后的问题是原问题的一个子问题，所以我们可以把它视为一个新的原问题，由相同的程序进行求解，这就是所谓的“自身调用自身”；二是如果求解问题失败或者是一种情况走到尽头，程序需要重新回到当前问题去寻找其他的变换路线，因此把当前问题缩小为子问题时所做的对当前问题产生影响的事情应该全部失效，这就是所谓的“回溯时还原现场”，关于递归与回溯，举一道简单的例题 LEETCODES1457. 二叉树中的伪回文路径1234567891011121314151617181920212223242526272829303132&#x2F;** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; * TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; *&#x2F;class Solution &#123; public: unordered_map&lt;int, int&gt; cnt; int pseudoPalindromicPaths(TreeNode* root) &#123; cnt[root-&gt;val]++; if (!root-&gt;left &amp;&amp; !root-&gt;right) &#123; int t &#x3D; 0; for (auto item : cnt) if (item.second % 2) t++; cnt[root-&gt;val]--; return t &lt;&#x3D; 1; &#125; int res &#x3D; 0; if (root-&gt;left) res +&#x3D; pseudoPalindromicPaths(root-&gt;left); if (root-&gt;right) res +&#x3D; pseudoPalindromicPaths(root-&gt;right); cnt[root-&gt;val]--; return res; &#125;&#125;; y总原话：从这道题中我们可以看出回溯时还原现场的要求，每一次return之前都要记得恢复，有两次return，所以两次都要记得恢复。我们要记住一点：如果进来的时候修改了，那么在退出之前就应该恢复 重申：如果求解问题失败或者是一种情况走到尽头，程序需要重新回到当前问题去寻找其他的变换路线，因此把当前问题缩小为子问题时所做的对当前问题产生影响的事情应该全部失效，这就是所谓的“回溯时还原现场” 递归总结可以看到，递归程序的基本单元是由“缩小”、“求解”、“扩展”组成的一种变换步骤，只是在“求解”时因为问题的相似性，不断重复使用了这样一种变换步骤，直至在一致的问题边界上直接确定答案。对于其中任意一条从“原问题”到“边界问题”的变换路线，横向来看，它跳的每一层是一次递归程序的执行；纵向来看，它的左右两边分别是寻找路线和沿其推导的流程。为了保证每层的“缩小”与“拓展”能够衔接在同一形式的问题上，“求解”操作自然要保证在执行前后程序面对的问题的状态是相同的，这也就是“还原现场”的必要性所在 递推与递归的简单应用在使用枚举算法蛮力探索问题的整个”状态空间“时，经常需要递归。按照规模大小，有如下的几种常见的枚举形式和遍历方式： 枚举形式 状态空间规模 一般遍历方式 多项式 n^k k为常数 循环(for)、递推 指数 k^n k为常数 递归、位运算 排列 n! 递归、C++next_permutation 组合 C_n^m 递归+减枝 递归的机器实现一台典型的32位计算机采用“堆栈结构”来实现函数调用，它在汇编语言中，把函数所需的第k个、第k-1个，……，第1个参数依次入栈，然后执行call(address)指令。该指令把返回地址（当前语句的下一条语句地址）入栈，然后跳转到address位置的语句。在函数返回时，它执行ret指令。该指令把返回地址出栈，并跳转到该地址继续执行 对于函数中定义的C++局部变量，在每次执行call与ret指令时，也会在栈中相应的保存与复原，而作用范围超过该函数的变量，以及通过new和malloc函数动态分配的空间则保存在另一块成为堆的结构中。栈指针、返回值、局部的运算会借助CPU的“寄存器”完成 由此我们得知： 局部变量在每层递归中都占有一份空间，声明过多或递归过深就会超出”栈“所能存储的范围，造成栈溢出 非局部变量对于各层递归都共享一份空间，需要及时维护、还原现场，以防止在各层递归之间存储和读取的数据相互影响 了解了递归的及其实现之后，我们就可以使用模拟的方法，把递归程序改写为非递归程序。具体来说，我们可以用一个数组来模拟栈，使用变量来模拟栈指针和返回值，使用switch/case或者goto/label来模拟语句跳转 分治分治法把一个问题划分成若干个规模更小的同类子问题，对这些子问题递归求解，然后在回溯时通过它们推导出原问题的解","categories":[{"name":"算法竞赛进阶指南","slug":"算法竞赛进阶指南","permalink":"http://liuhaotian.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://liuhaotian.top/tags/ACM/"}]},{"title":"0x01位运算例题","slug":"0x01位运算例题","date":"2020-05-29T01:00:46.000Z","updated":"2020-05-29T05:49:50.919Z","comments":true,"path":"2020/05/29/0x01位运算例题/","link":"","permalink":"http://liuhaotian.top/2020/05/29/0x01%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BE%8B%E9%A2%98/","excerpt":"","text":"0x01位运算例题 点击每道题题目即可获取原题链接 a^b分析long long可以表示的最大值为922 3372 0368 5477 5807unsigned long long可以表示的最大值为1844 6744 0737 0955 1615 由此观之a^b大于ULL类型可以表示的最大值，所以要用快速幂的思想来求解这道题。 且取模的性质如下 (a + b) % p = (a % p + b % p) % p (a - b) % p = (a % p - b % p) % p (a b) % p = (a % p b % p) % p a ^ b % p = ((a % p)^b) % p 代码12345678910111213141516#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int power(int a, int b, int c) &#123; int ans &#x3D; 1 % c; for (; b; b &gt;&gt;&#x3D; 1) &#123; if (b &amp; 1) ans &#x3D; (long long)ans * a % c; a &#x3D; (long long)a * a % c; &#125; return ans;&#125;int main() &#123; int a, b, p; scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;p); int ans &#x3D; power(a, b, p); printf(&quot;%d&quot;, ans);&#125; 复杂度我们可以用b&amp;1运算表示b的二进制下的最低位，并用b&gt;&gt;1来舍去最低位。在递归的过程中把&gt;&gt;和&amp;结合，其时间复杂度为O(logb) 64位整数乘法代码1234567891011121314151617#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;typedef long long LL;LL power(LL a, LL b, LL c) &#123; LL ans &#x3D; 0; for (; b; b &gt;&gt;&#x3D; 1) &#123; if (b &amp; 1) ans &#x3D; (ans + a) % c; a &#x3D; a * 2 % c; &#125; return ans;&#125;int main() &#123; LL a, b, p; scanf(&quot;%lld%lld%lld&quot;, &amp;a, &amp;b, &amp;p); LL ans &#x3D; power(a, b, p); printf(&quot;%lld&quot;, ans);&#125; 复杂度我们可以用b&amp;1运算表示b的二进制下的最低位，并用b&gt;&gt;1来舍去最低位。在递归的过程中把&gt;&gt;和&amp;结合，其时间复杂度为O(logb)，与上一题不同的是位数问题，但是每次%p之后都能保证不超过2*10^18，在long long的范围内 最短Hamilton路径分析我们可以采用朴素算法,其时间复杂度为O(n*n!)，n!为枚举n个点的全排列，n代表枚举路径的长度求得结果，这个算法的时间复杂度太高，不符合。而我们可以用二进制状态压缩DP来把时间复杂度优化到O((n^2)*(2^n)),我们用F[i,j]表示点被经过的状态对应二进制数i，且目前处于点j的最短路径 在起点时F[1,0]=0，即目前处于点0且只经过了点0的最短路径为0。为方便起见，我们将数组中其他元素设为无穷大，最终目的是求F[(1&lt;&lt;n),n-1]的值，即经过所有点且最终处于n-1的最短路径 在任意时刻，有公式F[i,j]=min(F[i,j],F[i^(1&lt;&lt;j),k]+weight[k,j])，根据分析可得k一定是倒数第二个经过的点。我们枚举k，当k对应在i的二进制为1时，我们讨论这种情况并比较 代码1234567891011121314151617181920212223#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 20, M &#x3D; 1 &lt;&lt; 20;int weight[N][N], F[M][N];int main() &#123; int n; scanf(&quot;%d&quot;, &amp;n); for (int i &#x3D; 0; i &lt; n; i++) for (int j &#x3D; 0; j &lt; n; j++) scanf(&quot;%d&quot;, &amp;weight[i][j]); memset(F, 0x3f, sizeof F); F[1][0] &#x3D; 0; for (int i &#x3D; 1; i &lt; 1 &lt;&lt; n; i++) for (int j &#x3D; 0; j &lt; n; j++) if (i &gt;&gt; j &amp; 1) for (int k &#x3D; 0; k &lt; n; k++) if ((i ^ 1 &lt;&lt; j) &gt;&gt; k &amp; 1) F[i][j] &#x3D; min(F[i][j], F[i ^ 1 &lt;&lt; j][k] + weight[k][j]); printf(&quot;%d&quot;, F[(1 &lt;&lt; n) - 1][n - 1]);&#125; 还差一题，未完待续","categories":[{"name":"算法竞赛进阶指南","slug":"算法竞赛进阶指南","permalink":"http://liuhaotian.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://liuhaotian.top/tags/ACM/"}]},{"title":"CODEFORCES 800 1360A.Minimal Square","slug":"CODEFORCES1360A","date":"2020-05-28T10:07:07.000Z","updated":"2020-05-28T10:45:59.408Z","comments":true,"path":"2020/05/28/CODEFORCES1360A/","link":"","permalink":"http://liuhaotian.top/2020/05/28/CODEFORCES1360A/","excerpt":"","text":"1360A.Minimal Square原题链接1360A.Minimal Square 题目大意第一行输入测试数目 从第二行开始依次输入每个测试样例的a和b 描述：a代表长，b代表宽，要求输出一个正方形的最小面积，这个正方形把两个相同的长方形(样例输入构成的长方形)覆盖，且这两个长方形不重合，每个长方形的边与正方形平行 解题思路求出长和宽的最小值乘以2，之后将所得的值与长和宽比较得出的最大值作为目标正方形的边长，再输出面积 解题代码1234567891011121314#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); while (t--) &#123; int a, b; scanf(&quot;%d%d&quot;, &amp;a, &amp;b); int temp &#x3D; min(a, b); int side &#x3D; 2 * temp; int s &#x3D; pow(max(side, max(a, b)), 2); printf(&quot;%d\\n&quot;, s); &#125;&#125;","categories":[{"name":"CODEFORCES","slug":"CODEFORCES","permalink":"http://liuhaotian.top/categories/CODEFORCES/"}],"tags":[{"name":"CODEFORCES800","slug":"CODEFORCES800","permalink":"http://liuhaotian.top/tags/CODEFORCES800/"},{"name":"acm/math","slug":"acm-math","permalink":"http://liuhaotian.top/tags/acm-math/"}]},{"title":"0x01位运算","slug":"0x01位运算","date":"2020-05-28T04:52:08.000Z","updated":"2020-05-28T09:12:19.550Z","comments":true,"path":"2020/05/28/0x01位运算/","link":"","permalink":"http://liuhaotian.top/2020/05/28/0x01%E4%BD%8D%E8%BF%90%E7%AE%97/","excerpt":"","text":"0x01 位 运 算基础知识 用xor表示异或运算，在m位二进制数中，通常称最低位为0位，从右到左依此类推，最高位为m-1位。 |-1|的原码为00000001|-1|的反码为11111110-1的补码为11111111，十六进制表示为0xff8位二进制对应的最大值127的十六进制表示为0x7f在计算机中数字以其补码的形式保存，正数的补码等于其原码，负数的补码等于其对应正数的原码取反码再+1 对于32位二进制数C(设十进制的值为S)，其按位取反得到的编码~C对应的十进制的值为-1-S(正负都满足此规律) 补码下每个数值都有唯一的表示方式，并且任意两个数值做加减法运算，都等价于在32位补码下做最高位不进位的二进制加减法运算。发生算术溢出时，32位无符号整数相当于自动对2^32取模，这也解释了有符号整数溢出时为何会出现负数的现象。 在算法竞赛中常用十六进制来表示一个常数，这样书写需要八个字符。| 10进制 | 16进制 || :-: | :-: || 21 4748 3647 | 0x7f ff ff ff || 10 6110 9567 | 0x3f 3f 3f 3f || -1 | 0xff ff ff ff | 4个字节的int表示的最大值为21 4748 36474个字节的unsigned int表示的最大值为42 9496 7295 0x3f 3f 3f 3f是一个很有用的值，它满足两个条件：其一，整数的两倍不超过int能表示的最大正整数其二，二进制下每八位都相同因此，我们可以用memset(a, 0x3f, sizeof a)来给a数组的每一个元素都赋值为正无穷，虽然0x7f能给每一个元素赋值成最大，但是为了避免溢出情况，推荐用0x3f。 1 &lt;&lt; n = 2^n, n &lt;&lt; 1 = 2nn &gt;&gt; 1 = n / 2.0 向下取整需要注意的是，整数做/运算执行的是向0取整(-3) &gt;&gt; 1 = -2, (-3) / 2 = -1 除非特殊提示，我们默认右移采用的是算术右移的实现方式 逻辑右移不考虑符号位，右移一位，左边补零即可。 算术右移考虑符号位，右移一位，若符号位为1，就在左边补1；否则，就补0。 所以算术右移也可以进行有符号位的除法,右移n位就等于除2的n次方。 例如，8位二进制数11001101分别右移一位。 逻辑右移就是[0]1100110 算术右移就是[1]1100110 状态压缩二进制状态压缩是指将一个长度为m的bool数组用一个m位二进制整数表示并存储的方法，利用如下操作实现对原bool数组对应下标元素的存取。 取出整数n的第k位：(n&gt;&gt;k)&amp;1 取出整数n的后k位(0到k-1位)：((1&lt;&lt;K)-1)&amp;n 把整数n的第k位反转：(1&lt;&lt;k) nor n 把整数n的第k位赋值为1：(1&lt;&lt;k)|n 把整数n的第k位赋值为0：(~(1&lt;&lt;k))&amp;n 当m不大时，我们可以使用一个整数存储，当m很大时，我们可以用若干个整数存储(int数组)，也可以用C++STL为我们提供的bitset实现。 成对变换通过计算可发现，对于非负整数n: 当n为偶数时，n xor 1 = n + 1 当n为奇数时，n xor 1 = n - 1 因此0与1, 2与3, 4与5 … 关于xor 1运算构成成对变换。 这一性质经常用于图论邻接表中边集的存储。在具有无向边(双向边)的图中把一对正反方向的边分别存储在邻接表数组的第n与n+1位置(其中n为偶数)，就可以通过xor 1的运算获得与当前边(x,y)反向的边(y,x)的存储位置。 lowbit运算lowbit(n)定义为非负整数n在二进制表示下“最低位的1及其后边所有的0”构成的数值。 例子：lowbit(10)=2 其原理为：lowbit(n)=n&amp;(~n-1)=n&amp;(-n) lowbit运算配合Hash可以找出整数二进制下所有是1的位，所花费的时间与1的个数同级。为了达到这个目的，我们只需要不断把n赋值为n-lowbit(n)直至n=0。我们可以把每次减去的数(其一定为2的幂)求log得到对应的1所在的位数，因为C++math.h库中的log函数复杂度常数较大，所以我们可以预处理一个数组，通过Hash的方法代替log运算。 此外lowbit运算也是树状数组中的一个基本运算。","categories":[{"name":"算法竞赛进阶指南","slug":"算法竞赛进阶指南","permalink":"http://liuhaotian.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://liuhaotian.top/tags/ACM/"}]},{"title":"HEXO+BUTTERFLY搭建骚气且实用的个人网站","slug":"HEXO-BUTTERFLY搭建骚气且实用的个人网站","date":"2020-05-27T03:01:58.000Z","updated":"2020-05-27T05:39:36.250Z","comments":true,"path":"2020/05/27/HEXO-BUTTERFLY搭建骚气且实用的个人网站/","link":"","permalink":"http://liuhaotian.top/2020/05/27/HEXO-BUTTERFLY%E6%90%AD%E5%BB%BA%E9%AA%9A%E6%B0%94%E4%B8%94%E5%AE%9E%E7%94%A8%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/","excerpt":"","text":"YOU CAN DRINK ALL YOU LIKE, BUT IN THE MORNING YOU GET HEADACHE WITH THE SAME PROBLEMS. 引子最近狂刷codeforces，但是逐渐发现自身一个问题，那就是刷过的题虽然在当天感觉很明白，但是隔一天，隔两天，就发现自己再遇到此题时又是一翻鏖战，这就是说明自己做过的题吸收的效率不够高，于是我就打算做一道题总结一道题。那么问题来了，在哪里总结呢？ 首先排除的是微信公众号，众所周知，微信公众号只能是自己分享东西的平台，而在这上面总结知识点就会引出很多问题，其一，每篇文章都要排版，其二，我的粉丝未必合此文章的胃口，其三，每天只能发布一篇文章，大大限制了自己的总结内容与时间分配。 那么诸如csdn、博客园、掘金、知乎这种东西呢？也有很多不方便的地方，比如文章左右侧的广告，实在影响人的心情，此外还有审核等等的制约，思前想后，我决定自己开辟一个个人网站。 当然不能从无到有手动开辟，自己能力有限，而且我的目的也是总结，总不能让自己以后把大把的时间浪费到维护网站上面去。于是我听从了大佬的建议，采用hexo+github的方式，hexo开辟网站，托管到github上面去。 花里胡哨的页面也是最吸引我的原因之一，我采用了butterfly的主题，绝对美炸天！ 过程过程当然是心酸+心酸+心酸，心态险些被搞没。至于搭建网站的教程，实话实说，看了n多篇技术总结，都号称史上最全，到最后还是觉得看官方文档最省事。 当然自己也找到了一些好的文章，在此列出来希望对大家有帮助： hexo安装文章： Hexo+Butterfly+Github+Coding搭建个人博客 hexo官方文档 butterfly主题系列文章： hexo-theme-butterfly 安装文档(一)快速开始 hexo-theme-butterfly 安装文档(二)主题页面 hexo-theme-butterfly 安装文档(三)主题配置 hexo-theme-butterfly 安装文档(四)主题问答、打赏名单 hexo-theme-butterfly 安装文档(五)更新日誌 收益没日没夜的折腾了两天，总能从其中学到什么：其一，当然是收获了又骚又实用的好网站；其二，学会了git+github的基本使用，常见的git命令也记得很熟；其三，收获了一种精神——永不放弃，哪有什么一帆风顺，加油，骚年！ 不足自己的网站弄的也不是很成熟，还有很多功能没有上线，比如日历、赞赏等，自己没有买域名，只是托管到github上。 欢迎我的个人网站","categories":[{"name":"博客搭建历程","slug":"博客搭建历程","permalink":"http://liuhaotian.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"}],"tags":[{"name":"微信公众号文章——随笔","slug":"微信公众号文章——随笔","permalink":"http://liuhaotian.top/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"TRANSLATE","slug":"TRANSLATE","permalink":"http://liuhaotian.top/categories/TRANSLATE/"},{"name":"CODEFORCES","slug":"CODEFORCES","permalink":"http://liuhaotian.top/categories/CODEFORCES/"},{"name":"C/C++常用API","slug":"C-C-常用API","permalink":"http://liuhaotian.top/categories/C-C-%E5%B8%B8%E7%94%A8API/"},{"name":"算法竞赛进阶指南","slug":"算法竞赛进阶指南","permalink":"http://liuhaotian.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"},{"name":"博客搭建历程","slug":"博客搭建历程","permalink":"http://liuhaotian.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"}],"tags":[{"name":"TRANSLATE","slug":"TRANSLATE","permalink":"http://liuhaotian.top/tags/TRANSLATE/"},{"name":"CODEFORCES800","slug":"CODEFORCES800","permalink":"http://liuhaotian.top/tags/CODEFORCES800/"},{"name":"acm/greedy","slug":"acm-greedy","permalink":"http://liuhaotian.top/tags/acm-greedy/"},{"name":"C/C++常用API","slug":"C-C-常用API","permalink":"http://liuhaotian.top/tags/C-C-%E5%B8%B8%E7%94%A8API/"},{"name":"ACM","slug":"ACM","permalink":"http://liuhaotian.top/tags/ACM/"},{"name":"acm/math","slug":"acm-math","permalink":"http://liuhaotian.top/tags/acm-math/"},{"name":"微信公众号文章——随笔","slug":"微信公众号文章——随笔","permalink":"http://liuhaotian.top/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E9%9A%8F%E7%AC%94/"}]}
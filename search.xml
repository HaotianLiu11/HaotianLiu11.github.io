<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LC 第 202 场周赛</title>
    <url>/2020/09/05/LC-%E7%AC%AC-202-%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="lc-第-202-场周赛"><a href="#lc-第-202-场周赛" class="headerlink" title="lc 第 202 场周赛"></a>lc 第 202 场周赛</h1><h2 id="1550-存在连续三个奇数的数组"><a href="#1550-存在连续三个奇数的数组" class="headerlink" title="1550. 存在连续三个奇数的数组"></a><a href="https://leetcode-cn.com/problems/three-consecutive-odds/" target="_blank" rel="noopener">1550. 存在连续三个奇数的数组</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遍历。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n)</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">threeConsecutiveOdds</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">2</span> &lt; arr.<span class="built_in">size</span>(); i ++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i] % <span class="number">2</span> &amp;&amp; arr[i + <span class="number">1</span>] % <span class="number">2</span> &amp;&amp; arr[i + <span class="number">2</span>] % <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1551-使数组中所有元素相等的最小操作数"><a href="#1551-使数组中所有元素相等的最小操作数" class="headerlink" title="1551. 使数组中所有元素相等的最小操作数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-array-equal/" target="_blank" rel="noopener">1551. 使数组中所有元素相等的最小操作数</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>存在一个长度为 n 的数组 arr ，其中 arr[i] = (2 * i) + 1 （ 0 &lt;= i &lt; n ）。</p>
<p>一次操作中，你可以选出两个下标，记作 x 和 y （ 0 &lt;= x, y &lt; n ）并使 arr[x] 减去 1 、arr[y] 加上 1 （即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 <strong>相等</strong> 。题目测试用例将会 <strong>保证</strong> ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p>
<p>给你一个整数 n，即数组的长度。请你返回使数组 arr 中所有元素相等所需的 <strong>最小操作数</strong> 。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为每次都是一个数 +1，一个数 -1，因此数组元素的总和不变，因此最后每个元素的值都等于此数组元素的和的平均值，我们先用等差数列求和公式求出总和的平均值，答案是每个元素到平均值的差的一半。</p>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n)</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum += <span class="built_in">abs</span>(<span class="number">2</span> * i - <span class="number">1</span> - n);</span><br><span class="line">        <span class="keyword">return</span> sum / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1552-两球之间的磁力"><a href="#1552-两球之间的磁力" class="headerlink" title="1552. 两球之间的磁力"></a><a href="https://leetcode-cn.com/problems/magnetic-force-between-two-balls/" target="_blank" rel="noopener">1552. 两球之间的磁力</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 n 个空的篮子，第 i 个篮子的位置在 position[i] ，Morty 想把 m 个球放到这些篮子里，使得任意两球间 <strong>最小磁力</strong> 最大。</p>
<p>已知两个球如果分别位于 x 和 y ，那么它们之间的磁力为 |x - y| 。</p>
<p>给你一个整数数组 position 和一个整数 m ，请你返回最大化的最小磁力。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>二分 + 贪心。</p>
<p>先排序，由于数据范围很大，我们用二分求出答案，二分的过程中对于每次的中间值，求出此中间值是否满足条件。</p>
<p>满足条件的判断方法：贪心，选择第 1 个元素，从第 2 个元素开始往后遍历，如果与上一个选择的元素的差值满足条件，则计数 ++，若计数大于等于要求的数目，则此中间值满足条件，l 变为 mid，因为答案可以比此中间值更大，若不满足，则 r=mid-1。</p>
<h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(nlogk)，n为数组长度 1e5，k为答案范围 1e9。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">position</span>, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">        sort(<span class="built_in">position</span>.<span class="built_in">begin</span>(), <span class="built_in">position</span>.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">1</span>, last = <span class="built_in">position</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">position</span>.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">position</span>[i] - last &gt;= mid) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    last = <span class="built_in">position</span>[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= m) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="1553-吃掉-N-个橘子的最少天数"><a href="#1553-吃掉-N-个橘子的最少天数" class="headerlink" title="1553. 吃掉 N 个橘子的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-eat-n-oranges/" target="_blank" rel="noopener">1553. 吃掉 N 个橘子的最少天数</a></h3><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p>
<ul>
<li>吃掉一个橘子。</li>
<li>如果剩余橘子数 n 能被 2 整除，那么你可以吃掉 n/2 个橘子。</li>
<li>如果剩余橘子数 n 能被 3 整除，那么你可以吃掉 2*(n/3) 个橘子。</li>
</ul>
<p>每天你只能从以上 3 种方案中选择一种方案。</p>
<p>请你返回吃掉所有 n 个橘子的最少天数。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>暴力 bfs，n 第一次到 0 的步数即为最小。</p>
<h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>小于O(n)</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; d;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> dist, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d.count(x)) <span class="keyword">return</span>;</span><br><span class="line">        d[x] = dist + <span class="number">1</span>;</span><br><span class="line">        q.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        q.push(n);</span><br><span class="line">        d[n] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.front();</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>) <span class="keyword">return</span> d[t];</span><br><span class="line">            q.pop();</span><br><span class="line">            extend(d[t], t - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>) extend(d[t], t / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (t % <span class="number">3</span> == <span class="number">0</span>) extend(d[t], t / <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LC 周赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LC 第 203 场周赛</title>
    <url>/2020/09/04/LC-%E7%AC%AC-203-%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LC-第-203-场周赛"><a href="#LC-第-203-场周赛" class="headerlink" title="LC 第 203 场周赛"></a>LC 第 203 场周赛</h1><h2 id="1560-圆形赛道上经过次数最多的扇区"><a href="#1560-圆形赛道上经过次数最多的扇区" class="headerlink" title="1560. 圆形赛道上经过次数最多的扇区"></a><a href="https://leetcode-cn.com/problems/most-visited-sector-in-a-circular-track/" target="_blank" rel="noopener">1560. 圆形赛道上经过次数最多的扇区</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个整数 n 和一个整数数组 rounds 。有一条圆形赛道由 n 个扇区组成，扇区编号从 1 到 n 。现将在这条赛道上举办一场马拉松比赛，该马拉松全程由 m 个阶段组成。其中，第 i 个阶段将会从扇区 rounds[i - 1] 开始，到扇区 rounds[i] 结束。举例来说，第 1 阶段从 rounds[0] 开始，到 rounds[1] 结束。</p>
<p>请你以数组形式返回经过次数最多的那几个扇区，按扇区编号 升序 排列。</p>
<p>注意，赛道按扇区编号升序逆时针形成一个圆（请参见第一个示例）。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为 rounds.length 一定大于大于 2，所以我们只需要考虑 rounds.front 和 rounds.back 就可以了，前者代表第一个阶段从此扇形区域开始跑，后者代表最后一圈跑到此扇形区域截止，因此 rounds.front 到 n 和 1 到 rounds.back 所经过的扇形中重复次数多的即为我们所求。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(nlogn)</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mostVisited</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rounds)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> st = rounds.front();</span><br><span class="line">        <span class="keyword">while</span> (st != rounds.back()) &#123;</span><br><span class="line">            res.push_back(st);</span><br><span class="line">            st++;</span><br><span class="line">            st = (st &gt; n ? st % n : st);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back(rounds.back());</span><br><span class="line">        sort(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>充满自信！</p>
<h2 id="1561-你可以获得的最大硬币数目"><a href="#1561-你可以获得的最大硬币数目" class="headerlink" title="1561. 你可以获得的最大硬币数目"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-coins-you-can-get/" target="_blank" rel="noopener">1561. 你可以获得的最大硬币数目</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有 3n 堆数目不一的硬币，你和你的朋友们打算按以下方式分硬币：</p>
<p>每一轮中，你将会选出 任意 3 堆硬币（不一定连续）。</p>
<ul>
<li>Alice 将会取走硬币数量最多的那一堆。</li>
<li>你将会取走硬币数量第二多的那一堆。</li>
<li>Bob 将会取走最后一堆。</li>
<li>重复这个过程，直到没有更多硬币。</li>
<li>给你一个整数数组 piles ，其中 piles[i] 是第 i 堆中硬币的数目。</li>
</ul>
<p>返回你可以获得的最大硬币数目。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>把数组从大到小排序，从头到截止部分（不是数组尾部）依次取两个，累加每次取的两个数中较小的那个，此和即为所求。</p>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(nlogn)</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; piles)</span> </span>&#123;</span><br><span class="line">        sort(piles.<span class="built_in">begin</span>(), piles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = piles.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; i++, j -= <span class="number">2</span>) </span><br><span class="line">            res += piles[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h3><p>充满自信！</p>
<h2 id="1562-查找大小为-M-的最新分组"><a href="#1562-查找大小为-M-的最新分组" class="headerlink" title="1562. 查找大小为 M 的最新分组"></a><a href="https://leetcode-cn.com/problems/find-latest-group-of-size-m/" target="_blank" rel="noopener">1562. 查找大小为 M 的最新分组</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你一个数组 arr ，该数组表示一个从 1 到 n 的数字排列。有一个长度为 n 的二进制字符串，该字符串上的所有位最初都设置为 0 。</p>
<p>在从 1 到 n 的每个步骤 i 中（假设二进制字符串和 arr 都是从 1 开始索引的情况下），二进制字符串上位于位置 arr[i] 的位将会设为 1 。</p>
<p>给你一个整数 m ，请你找出二进制字符串上存在长度为 m 的一组 1 的最后步骤。一组 1 是一个连续的、由 1 组成的子串，且左右两边不再有可以延伸的 1 。</p>
<p>返回存在长度 恰好 为 m 的一组 1  的最后步骤。如果不存在这样的步骤，请返回 -1 。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>维护双链表，设 l[x] 为 x 的左端点，设 r[x] 为 x 的右端点。当 l[x] 和 r[x] 不为 0 时，x 到 r[x] 或者 l[x] 到 x 为一段连续的 1。</p>
<p><img src="https://cdn.jsdelivr.net/gh/foxscallion11/picturebed1@master/2020/09/03/92d2ac211f0added42b0b1a87cd4b3fc.png" alt=""></p>
<h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n)</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l, r;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r[x] - x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLatestStep</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        l.resize(n + <span class="number">2</span>), r.resize(n + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (l[x - <span class="number">1</span>] &amp;&amp; r[x + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(l[x - <span class="number">1</span>]) == m) cnt--;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(x + <span class="number">1</span>) == m) cnt--;</span><br><span class="line">                r[l[x - <span class="number">1</span>]] = r[x + <span class="number">1</span>];</span><br><span class="line">                l[r[x + <span class="number">1</span>]] = l[x - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(l[x - <span class="number">1</span>]) == m) cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l[x - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(l[x - <span class="number">1</span>]) == m) cnt--;</span><br><span class="line">                r[l[x - <span class="number">1</span>]] = x, l[x] = l[x - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(l[x - <span class="number">1</span>]) == m) cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r[x + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(x + <span class="number">1</span>) == m) cnt--;</span><br><span class="line">                l[r[x + <span class="number">1</span>]] = x, r[x] = r[x + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(x) == m) cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l[x] = r[x] = x;</span><br><span class="line">                <span class="keyword">if</span> (m == <span class="number">1</span>) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt) res = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-2"><a href="#收获-2" class="headerlink" title="收获"></a>收获</h3><p>涨知识emmmm</p>
<h2 id="1563-石子游戏-V"><a href="#1563-石子游戏-V" class="headerlink" title="1563. 石子游戏 V"></a><a href="https://leetcode-cn.com/problems/stone-game-v/" target="_blank" rel="noopener">1563. 石子游戏 V</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>几块石子 <strong>排成一行</strong> ，每块石子都有一个关联值，关联值为整数，由数组 stoneValue 给出。</p>
<p>游戏中的每一轮：Alice 会将这行石子分成两个 <strong>非空行</strong>（即，左侧行和右侧行）；Bob 负责计算每一行的值，即此行中所有石子的值的总和。Bob 会丢弃值最大的行，Alice 的得分为剩下那行的值（每轮累加）。如果两行的值相等，Bob 让 Alice 决定丢弃哪一行。下一轮从剩下的那一行开始。</p>
<p>只 <strong>剩下一块石子</strong> 时，游戏结束。Alice 的分数最初为 0 。</p>
<p>返回 Alice <strong>能够获得的最大分数</strong> 。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>区间 DP 类型题。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/foxscallion11/picturebed1@master/2020/09/03/4050e008dcff2a82c3b5b11bb16bff50.png" alt=""></p>
<h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n^3)，勉强能冲emmmm</p>
<p>如果在双重枚举 len 循环内再加个 for，会 TLE，因此代码用自增存值，避免反复取值拿前缀和，计算机取值时间消耗高，这样减少常数，勉强能过，此题可以把双重 len 循环内再加个 for 要写的状态再加个 dp，可优化到 O(ln^2logn)。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[r] - s[l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stoneGameV</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = w.<span class="built_in">size</span>();</span><br><span class="line">        s.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + w[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len - <span class="number">1</span>, sum = <span class="built_in">get</span>(i, j), k = i, p = w[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (p &lt; sum - p) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; p + f[i][k]) t = p + f[i][k];</span><br><span class="line">                    p += w[k++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == sum - p) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; p + <span class="built_in">max</span>(f[i][k], f[k + <span class="number">1</span>][j])) t = p + <span class="built_in">max</span>(f[i][k], f[k + <span class="number">1</span>][j]);</span><br><span class="line">                    p += w[k++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (k &lt; j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; sum - p + f[k + <span class="number">1</span>][j]) t = sum - p + f[k + <span class="number">1</span>][j];</span><br><span class="line">                    p += w[k++];</span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">1</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-3"><a href="#收获-3" class="headerlink" title="收获"></a>收获</h3><p>知道了卡常这东西emmmm</p>
]]></content>
      <categories>
        <category>LC 周赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LC 第 204 场周赛</title>
    <url>/2020/09/02/LC-%E7%AC%AC-204-%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LC-第-204-场周赛"><a href="#LC-第-204-场周赛" class="headerlink" title="LC 第 204 场周赛"></a>LC 第 204 场周赛</h1><h2 id="1566-重复至少-K-次且长度为-M-的模式"><a href="#1566-重复至少-K-次且长度为-M-的模式" class="headerlink" title="1566. 重复至少 K 次且长度为 M 的模式"></a><a href="https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/" target="_blank" rel="noopener">1566. 重复至少 K 次且长度为 M 的模式</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个正整数数组 arr，请你找出一个长度为 m 且在数组中至少重复 k 次的模式。</p>
<p><strong>模式</strong> 是由一个或多个值组成的子数组（连续的子序列），<strong>连续</strong> 重复多次但 <strong>不重叠</strong> 。 模式由其长度和重复次数定义。</p>
<p>如果数组中存在至少重复 k 次且长度为 m 的模式，则返回 true ，否则返回  false 。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于 m 和 k 的范围很小，所以我们采取暴力法，遍历数组的所有符合条件的元素，查看以该元素为起始点的 m * k 的序列是否为定义的模式，且符合条件。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>双重循环，时间复杂度为 O(n ^ 2)。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsPattern</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + m * k &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + m * k; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] != arr[i + (j - i) % m]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>假设两个指针 i 在前，j 在后， 那么 j - i 为 j 对 i 的偏移量，而 j - i + 1 为 <code>[i, j]</code> 的长度。</p>
<h2 id="1567-乘积为正数的最长子数组长度"><a href="#1567-乘积为正数的最长子数组长度" class="headerlink" title="1567. 乘积为正数的最长子数组长度"></a><a href="https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/" target="_blank" rel="noopener">1567. 乘积为正数的最长子数组长度</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你一个整数数组 nums ，请你求出乘积为正数的最长子数组的长度。</p>
<p>一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。</p>
<p>请你返回乘积为正数的最长子数组长度。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>数组中有三类元素，分别为正数、负数、零，所以我们可以用 DP 来做这道题。</p>
<p>我们令 f[i] 代表以 i 为终止点且数组元素乘积为正数的最大的序列；我们令 g[i] 代表以 i 为终止点且数组元素乘积为负数的最大的序列。</p>
<p><img src="https://cdn.jsdelivr.net/gh/foxscallion11/picturebed1@master/2020/09/01/978712af5558df596b0d758c286049dd.png" alt=""></p>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>DP 遍历，g 算一次，f 算一次，时间复杂度为 O(n)。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxLen</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;int&gt; f(n), g(n);</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; <span class="number">0</span>)</span><br><span class="line">            f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt; <span class="number">0</span>)</span><br><span class="line">            g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = f[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                f[i] = f[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[i - <span class="number">1</span>]) g[i] = g[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                g[i] = f[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[i - <span class="number">1</span>]) f[i] = g[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res = <span class="built_in">max</span>(res, f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h3><p>收获是啥？见识了新东西？更熟悉 DP？</p>
<h2 id="1568-使陆地分离的最少天数"><a href="#1568-使陆地分离的最少天数" class="headerlink" title="1568. 使陆地分离的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/" target="_blank" rel="noopener">1568. 使陆地分离的最少天数</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你一个由若干 0 和 1 组成的二维网格 grid ，其中 0 表示水，而 1 表示陆地。岛屿由水平方向或竖直方向上相邻的 1 （陆地）连接形成。</p>
<p>如果 <strong>恰好只有一座岛屿</strong> ，则认为陆地是 <strong>连通的</strong> ；否则，陆地就是 <strong>分离的</strong> 。</p>
<p>一天内，可以将任何单个陆地单元（1）更改为水单元（0）。</p>
<p>返回使陆地分离的最少天数。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>答案只可能是 0 或者 1 或者 2，因为如果陆地已经分离，那么不需要更改，返回 0 天。</p>
<p>此外，我们需要知道，一块连通的陆地分离做多需要两天，因为每块连通的陆地都有边界坐标，那么一定至少有一个坐标的陆地的四联通中的其二为水，剩余二为陆地，那么我们最多需要两天就可以把连通的陆地分离。</p>
<p>如果需要一天，我们则可以遍历联通陆地，依次取其中的一个坐标变为水，检测是否能让此联通的陆地分离，如果分离，则可以需要一天，如果不可以，则证明分离此陆地需要两天。</p>
<h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>当为 1 个联通陆地时，我们遍历此连通块，依次替换单位坐标为水，时间复杂度为 n * n，每次替换之后 check 检查，所以总共的时间复杂度为 O(n^4)。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; st;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        st[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; n &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; m &amp;&amp; ! st[a][b] &amp;&amp; g[a][b] == <span class="number">1</span>) </span><br><span class="line">                dfs(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        st = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[i][j] &amp;&amp; g[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    dfs(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        g = grid;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (check()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) </span><br><span class="line">                <span class="keyword">if</span> (g[i][j]) &#123;</span><br><span class="line">                    g[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (check()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    g[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-2"><a href="#收获-2" class="headerlink" title="收获"></a>收获</h3><p>更加熟悉图论？题是好题，我是傻逼。</p>
<h2 id="1569-将子数组重新排序得到同一个二叉查找树的方案数"><a href="#1569-将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="1569. 将子数组重新排序得到同一个二叉查找树的方案数"></a><a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/" target="_blank" rel="noopener">1569. 将子数组重新排序得到同一个二叉查找树的方案数</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给你一个数组 nums 表示 1 到 n 的一个排列。我们按照元素在 nums 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 nums 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 nums 原本数字顺序得到的二叉查找树相同。</p>
<p>比方说，给你 nums = [2,1,3]，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组 [2,3,1] 也能得到相同的 BST，但 [3,2,1] 会得到一棵不同的 BST 。</p>
<p>请你返回重排 nums 后，与原数组 nums 得到相同二叉查找树的方案数。</p>
<p>由于答案可能会很大，请将结果对 10^9 + 7 取余数。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>用到了组合计数，由于 C_n^m 其中的 n 和 m 的范围小于 2000，所以我们可以用杨辉三角形定理来求此组合计数并记录。</p>
<p>那么数组中的第一个元素的位置是确定的，不能改变，设为 k，之后所有的元素，把大于 k 的和小于 k 的元素依次存储，那么此题的答案就是两类数据（大于 k 和小于 k 的两组数据）的排序，和两组数据内部的排序的乘积。</p>
<p>之后对两组数据内部递归排列，每次递归会确定一个元素的次数，最后求得答案。</p>
<h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>每次递归筛出一个元素，所以外重循环是遍历数组所有元素，每次筛时遍历数组分大小，所以时间复杂度为 O(n^2)。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; C;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfWays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        C = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">                <span class="keyword">if</span> (!j)</span><br><span class="line">                    C[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> (f(nums) + MOD - <span class="number">1</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> k = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums)</span><br><span class="line">            <span class="keyword">if</span> (x &lt; k)</span><br><span class="line">                left.push_back(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; k)</span><br><span class="line">                right.push_back(x - k);</span><br><span class="line">        <span class="keyword">return</span> (LL)C[n - <span class="number">1</span>][k - <span class="number">1</span>] * f(left) % MOD * f(right) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-3"><a href="#收获-3" class="headerlink" title="收获"></a>收获</h3><p>拓宽视野！</p>
]]></content>
      <categories>
        <category>LC 周赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LC 第 33 场双周赛</title>
    <url>/2020/09/03/LC-%E7%AC%AC-33-%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LC-第-33-场双周赛"><a href="#LC-第-33-场双周赛" class="headerlink" title="LC 第 33 场双周赛"></a>LC 第 33 场双周赛</h1><h2 id="1556-千位分隔数"><a href="#1556-千位分隔数" class="headerlink" title="1556. 千位分隔数"></a><a href="https://leetcode-cn.com/problems/thousand-separator/" target="_blank" rel="noopener">1556. 千位分隔数</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个整数 <code>n</code>，请你每隔三位添加点（即 “.” 符号）作为千位分隔符，并将结果以字符串格式返回。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先把整数转为字符串，遍历字符串，在符合条件的位置上加上点。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n)</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">thousandSeparator</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> num = to_string(n);</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; j) res += <span class="string">'.'</span>;</span><br><span class="line">            res += num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>充满自信！</p>
<h2 id="1557-可以到达所有点的最少点数目"><a href="#1557-可以到达所有点的最少点数目" class="headerlink" title="1557. 可以到达所有点的最少点数目"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-vertices-to-reach-all-nodes/" target="_blank" rel="noopener">1557. 可以到达所有点的最少点数目</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你一个 <strong>有向无环图</strong> ， n 个节点编号为 0 到 n-1 ，以及一个边数组 edges ，其中 edges[i] = [fromi, toi] 表示一条从点  fromi 到点 toi 的有向边。</p>
<p>找到最小的点集使得从这些点出发能到达图中所有点。题目保证解存在且唯一。</p>
<p>你可以以任意顺序返回这些节点编号。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>入读为 0 的节点一定不能被其余点遍历，入度不为 0 的点一定能被其余点遍历，统计入度为 0 的点的个数即为答案。</p>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>O(n)</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findSmallestSetOfVertices</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges)</span><br><span class="line">            d[e[<span class="number">1</span>]]++;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!d[i]) res.push_back(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h3><p>充满自信！</p>
<h2 id="1558-得到目标数组的最少函数调用次数"><a href="#1558-得到目标数组的最少函数调用次数" class="headerlink" title="1558. 得到目标数组的最少函数调用次数"></a><a href="https://leetcode-cn.com/problems/minimum-numbers-of-function-calls-to-make-target-array/" target="_blank" rel="noopener">1558. 得到目标数组的最少函数调用次数</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p><img src="https://cdn.jsdelivr.net/gh/foxscallion11/picturebed1@master/2020/09/04/5aa2c776313a390e574b0485ae3156fe.png" alt=""></p>
<p>给你一个与 nums 大小相同且初始值全为 0 的数组 arr ，请你调用以上函数得到整数数组 nums 。</p>
<p>请你返回将 arr 变成 nums 的最少函数调用次数。</p>
<p>答案保证在 32 位有符号整数以内。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>贪心的思想，假设一个数字的二进制有 k 位，那么把它从 0 变为目标数字时，会左移 k-1 位，并在左移的过程中穿插着 +1 的步骤，所以把 0 变为目标数一共需要 k-1+n，n 为二进制中 1 的个数。</p>
<p>对于此题来说，我们找到最大的数的位数 k，然后对于所有数都左移 k-1 次，并在左移过程中对一部分数 +1。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, o = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> ones = <span class="number">0</span>, bits = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &amp; <span class="number">1</span>) ones++;</span><br><span class="line">                bits++;</span><br><span class="line">                x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k = <span class="built_in">max</span>(k, bits);</span><br><span class="line">            o += ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k - <span class="number">1</span> + o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-2"><a href="#收获-2" class="headerlink" title="收获"></a>收获</h3><p>涨知识emmmm</p>
<h2 id="1559-二维网格图中探测环"><a href="#1559-二维网格图中探测环" class="headerlink" title="1559. 二维网格图中探测环"></a><a href="https://leetcode-cn.com/problems/detect-cycles-in-2d-grid/" target="_blank" rel="noopener">1559. 二维网格图中探测环</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给你一个二维字符网格数组 grid ，大小为 m x n ，你需要检查 grid 中是否存在 相同值 形成的环。</p>
<p>一个环是一条开始和结束于同一个格子的长度 <strong>大于等于 4</strong> 的路径。对于一个给定的格子，你可以移动到它上、下、左、右四个方向相邻的格子之一，可以移动的前提是这两个格子有 <strong>相同的值</strong> 。</p>
<p>同时，你也不能回到上一次移动时所在的格子。比方说，环  (1, 1) -&gt; (1, 2) -&gt; (1, 1) 是不合法的，因为从 (1, 2) 移动到 (1, 1) 回到了上一次移动时的格子。</p>
<p>如果 grid 中有相同值形成的环，请你返回 true ，否则返回 false 。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>dfs 遍历，设状态 st，初次遍历一个方格时，st 从 0 变为 1，当再次遍历到 st 为 1 的点时，证明有环，注意 dfs 爆搜时不能往上一次的相反方向搜，也就是第一次向下搜，第二次不能向上搜，我们用位运算 符 ^ 来满足此条件。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; g;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; st;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsCycle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        g = grid;</span><br><span class="line">        st = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;(g.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(g[<span class="number">0</span>].<span class="built_in">size</span>()));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; g.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g[<span class="number">0</span>].<span class="built_in">size</span>(); j++)</span><br><span class="line">                <span class="keyword">if</span> (!st[i][j] &amp;&amp; dfs(i, j, <span class="number">-1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        st[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (i != p) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; g.<span class="built_in">size</span>() &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; g[<span class="number">0</span>].<span class="built_in">size</span>() &amp;&amp; g[x][y] == g[a][b]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (st[a][b]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dfs(a, b, i ^ <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="收获-3"><a href="#收获-3" class="headerlink" title="收获"></a>收获</h3><p>充满自信！第一次把 <code>^ 用于图论相反边</code> 知识点用在了题目上！</p>
]]></content>
      <categories>
        <category>LC 周赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO+BUTTERFLY搭建骚气且实用的个人网站</title>
    <url>/2020/05/27/HEXO-BUTTERFLY%E6%90%AD%E5%BB%BA%E9%AA%9A%E6%B0%94%E4%B8%94%E5%AE%9E%E7%94%A8%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>YOU CAN DRINK ALL YOU LIKE, BUT IN THE MORNING YOU GET HEADACHE WITH THE SAME PROBLEMS.</p>
</blockquote>
<hr>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>最近狂刷<code>codeforces</code>，但是逐渐发现自身一个问题，那就是刷过的题虽然在当天感觉很明白，但是隔一天，隔两天，就发现自己再遇到此题时又是一翻鏖战，这就是说明自己做过的题吸收的效率不够高，于是我就打算做一道题总结一道题。那么问题来了，在哪里总结呢？</p>
<p>首先排除的是微信公众号，众所周知，微信公众号只能是自己分享东西的平台，而在这上面总结知识点就会引出很多问题，其一，每篇文章都要排版，其二，我的粉丝未必合此文章的胃口，其三，每天只能发布一篇文章，大大限制了自己的总结内容与时间分配。</p>
<p>那么诸如<code>csdn</code>、博客园、掘金、知乎这种东西呢？也有很多不方便的地方，比如文章左右侧的广告，实在影响人的心情，此外还有审核等等的制约，思前想后，我决定自己开辟一个个人网站。</p>
<p>当然不能从无到有手动开辟，自己能力有限，而且我的目的也是总结，总不能让自己以后把大把的时间浪费到维护网站上面去。于是我听从了大佬的建议，采用<code>hexo+github</code>的方式，<code>hexo</code>开辟网站，托管到<code>github</code>上面去。</p>
<p>花里胡哨的页面也是最吸引我的原因之一，我采用了<code>butterfly</code>的主题，绝对美炸天！</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>过程当然是心酸+心酸+心酸，心态险些被搞没。至于搭建网站的教程，实话实说，看了n多篇技术总结，都号称史上最全，到最后还是觉得看官方文档最省事。</p>
<p>当然自己也找到了一些好的文章，在此列出来希望对大家有帮助：</p>
<p><code>hexo</code>安装文章：</p>
<ul>
<li><a href="https://www.jianshu.com/p/a1a4ebf0e5fc" target="_blank" rel="noopener">Hexo+Butterfly+Github+Coding搭建个人博客</a></li>
<li><a href="https://hexo.io/" target="_blank" rel="noopener">hexo官方文档</a></li>
</ul>
<p><code>butterfly</code>主题系列文章：</p>
<ol>
<li><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly 安装文档(一)快速开始</a></li>
<li><a href="https://jerryc.me/posts/dc584b87/" target="_blank" rel="noopener">hexo-theme-butterfly 安装文档(二)主题页面</a></li>
<li><a href="https://jerryc.me/posts/4aa8abbe/" target="_blank" rel="noopener">hexo-theme-butterfly 安装文档(三)主题配置</a></li>
<li><a href="https://jerryc.me/posts/98d20436/" target="_blank" rel="noopener">hexo-theme-butterfly 安装文档(四)主题问答、打赏名单</a></li>
<li><a href="https://jerryc.me/posts/198a4240/" target="_blank" rel="noopener">hexo-theme-butterfly 安装文档(五)更新日誌</a></li>
</ol>
<h2 id="收益"><a href="#收益" class="headerlink" title="收益"></a>收益</h2><p>没日没夜的折腾了两天，总能从其中学到什么：其一，当然是收获了又骚又实用的好网站；其二，学会了<code>git</code>+<code>github</code>的基本使用，常见的<code>git</code>命令也记得很熟；其三，收获了一种精神——永不放弃，哪有什么一帆风顺，加油，骚年！</p>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>自己的网站弄的也不是很成熟，还有很多功能没有上线，比如日历、赞赏等，自己没有买域名，只是托管到<code>github</code>上。</p>
<h2 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h2><p><a href="https://haotianliu11.github.io/" target="_blank" rel="noopener">我的个人网站</a></p>
<hr>
<p><img src="https://imgkr.cn-bj.ufileos.com/148c824d-4eb8-48d3-9825-51625347b0f0.png" alt=""></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
